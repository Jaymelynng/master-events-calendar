{"ast":null,"code":"import { supabase } from './supabase';\n\n// Gyms API\nexport const gymsApi = {\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('gyms').select('*').order('name');\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async create(gym) {\n    const {\n      data,\n      error\n    } = await supabase.from('gyms').insert([gym]).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('gyms').update(updates).eq('id', id).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('gyms').delete().eq('id', id);\n    if (error) throw new Error(error.message);\n  }\n};\n\n// Events API\nexport const eventsApi = {\n  async getAll(startDate, endDate) {\n    let query = supabase.from('events_with_gym').select('*').order('date', {\n      ascending: true\n    });\n    if (startDate) {\n      query = query.gte('date', startDate);\n    }\n    if (endDate) {\n      query = query.lte('date', endDate);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async create(event) {\n    // First get the gym name for the event\n    const {\n      data: gym\n    } = await supabase.from('gyms').select('name').eq('id', event.gym_id).single();\n    const {\n      data,\n      error\n    } = await supabase.from('events').insert([event]).select().single();\n    if (error) throw new Error(error.message);\n\n    // Add gym_name for frontend compatibility\n    return {\n      ...data,\n      gym_name: (gym === null || gym === void 0 ? void 0 : gym.name) || 'Unknown'\n    };\n  },\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('events').update(updates).eq('id', id).select().single();\n    if (error) throw new Error(error.message);\n\n    // Get gym name if gym_id was updated\n    if (updates.gym_id) {\n      const {\n        data: gym\n      } = await supabase.from('gyms').select('name').eq('id', updates.gym_id).single();\n      data.gym_name = (gym === null || gym === void 0 ? void 0 : gym.name) || 'Unknown';\n    }\n    return data;\n  },\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('events').delete().eq('id', id);\n    if (error) throw new Error(error.message);\n  }\n};\n\n// Event Types API\nexport const eventTypesApi = {\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('event_types').select('*').order('name');\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async getTrackedTypes() {\n    const {\n      data,\n      error\n    } = await supabase.from('event_types').select('*').eq('is_tracked', true).order('name');\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('event_types').update(updates).eq('id', id).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  }\n};\nexport const monthlyRequirementsApi = {\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('monthly_requirements').select('*').order('event_type');\n    if (error) throw new Error(error.message);\n    return data || [];\n  }\n};","map":{"version":3,"names":["supabase","gymsApi","getAll","data","error","from","select","order","Error","message","create","gym","insert","single","update","id","updates","eq","delete","eventsApi","startDate","endDate","query","ascending","gte","lte","event","gym_id","gym_name","name","eventTypesApi","getTrackedTypes","monthlyRequirementsApi"],"sources":["C:/Users/Jayme/JAYMES APP PROJECTS/MASTER EVENTS/src/lib/api.js"],"sourcesContent":["import { supabase } from './supabase'\r\n\r\n// Gyms API\r\nexport const gymsApi = {\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('gyms')\r\n      .select('*')\r\n      .order('name')\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async create(gym) {\r\n    const { data, error } = await supabase\r\n      .from('gyms')\r\n      .insert([gym])\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async update(id, updates) {\r\n    const { data, error } = await supabase\r\n      .from('gyms')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async delete(id) {\r\n    const { error } = await supabase\r\n      .from('gyms')\r\n      .delete()\r\n      .eq('id', id)\r\n    \r\n    if (error) throw new Error(error.message)\r\n  }\r\n}\r\n\r\n// Events API\r\nexport const eventsApi = {\r\n  async getAll(startDate, endDate) {\r\n    let query = supabase\r\n      .from('events_with_gym')\r\n      .select('*')\r\n      .order('date', { ascending: true })\r\n    \r\n    if (startDate) {\r\n      query = query.gte('date', startDate)\r\n    }\r\n    if (endDate) {\r\n      query = query.lte('date', endDate)\r\n    }\r\n    \r\n    const { data, error } = await query\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async create(event) {\r\n    // First get the gym name for the event\r\n    const { data: gym } = await supabase\r\n      .from('gyms')\r\n      .select('name')\r\n      .eq('id', event.gym_id)\r\n      .single()\r\n    \r\n    const { data, error } = await supabase\r\n      .from('events')\r\n      .insert([event])\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    \r\n    // Add gym_name for frontend compatibility\r\n    return {\r\n      ...data,\r\n      gym_name: gym?.name || 'Unknown'\r\n    }\r\n  },\r\n\r\n  async update(id, updates) {\r\n    const { data, error } = await supabase\r\n      .from('events')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    \r\n    // Get gym name if gym_id was updated\r\n    if (updates.gym_id) {\r\n      const { data: gym } = await supabase\r\n        .from('gyms')\r\n        .select('name')\r\n        .eq('id', updates.gym_id)\r\n        .single()\r\n      \r\n      data.gym_name = gym?.name || 'Unknown'\r\n    }\r\n    \r\n    return data\r\n  },\r\n\r\n  async delete(id) {\r\n    const { error } = await supabase\r\n      .from('events')\r\n      .delete()\r\n      .eq('id', id)\r\n    \r\n    if (error) throw new Error(error.message)\r\n  }\r\n}\r\n\r\n// Event Types API\r\nexport const eventTypesApi = {\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('event_types')\r\n      .select('*')\r\n      .order('name')\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async getTrackedTypes() {\r\n    const { data, error } = await supabase\r\n      .from('event_types')\r\n      .select('*')\r\n      .eq('is_tracked', true)\r\n      .order('name')\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async update(id, updates) {\r\n    const { data, error } = await supabase\r\n      .from('event_types')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  }\r\n} \r\n\r\nexport const monthlyRequirementsApi = {\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('monthly_requirements')\r\n      .select('*')\r\n      .order('event_type');\r\n    if (error) throw new Error(error.message);\r\n    return data || [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}