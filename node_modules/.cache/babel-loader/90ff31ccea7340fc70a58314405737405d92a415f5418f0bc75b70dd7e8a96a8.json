{"ast":null,"code":"import { supabase } from './supabase';\n\n// 🏭 Jayme's Link Factory API Functions\n// Manages gym links in Supabase database\n\nexport const gymLinksApi = {\n  // Get all gym links with details\n  async getAllLinksDetailed() {\n    const {\n      data,\n      error\n    } = await supabase.from('gym_links_detailed').select('*').order('gym_name').order('sort_order');\n    if (error) throw new Error(error.message);\n    return data || [];\n  },\n  // Get links for a specific gym\n  async getLinksByGym(gymId) {\n    const {\n      data,\n      error\n    } = await supabase.from('gym_links_detailed').select('*').eq('gym_id', gymId).order('sort_order');\n    if (error) throw new Error(error.message);\n    return data || [];\n  },\n  // Get quick links (top 5 most used)\n  async getQuickLinks() {\n    const {\n      data,\n      error\n    } = await supabase.from('quick_links').select('*');\n    if (error) throw new Error(error.message);\n    return data || [];\n  },\n  // Create or update a gym link\n  async upsertGymLink(gymId, linkTypeId, url) {\n    const {\n      data,\n      error\n    } = await supabase.from('gym_links').upsert({\n      gym_id: gymId,\n      link_type_id: linkTypeId,\n      url: url,\n      is_active: true\n    }, {\n      onConflict: 'gym_id,link_type_id'\n    }).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  // Delete a gym link\n  async deleteGymLink(gymId, linkTypeId) {\n    const {\n      error\n    } = await supabase.from('gym_links').delete().eq('gym_id', gymId).eq('link_type_id', linkTypeId);\n    if (error) throw new Error(error.message);\n  },\n  // Bulk import links\n  async bulkImportLinks(links) {\n    const {\n      data,\n      error\n    } = await supabase.from('gym_links').upsert(links, {\n      onConflict: 'gym_id,link_type_id'\n    }).select();\n    if (error) throw new Error(error.message);\n    return data;\n  }\n};\nexport const linkTypesApi = {\n  // Get all link types\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('link_types').select('*').eq('is_active', true).order('sort_order');\n    if (error) throw new Error(error.message);\n    return data || [];\n  },\n  // Get link types by category\n  async getByCategory() {\n    const {\n      data,\n      error\n    } = await supabase.from('link_types').select('*').eq('is_active', true).order('category').order('sort_order');\n    if (error) throw new Error(error.message);\n\n    // Group by category\n    const grouped = {};\n    data.forEach(linkType => {\n      if (!grouped[linkType.category]) {\n        grouped[linkType.category] = [];\n      }\n      grouped[linkType.category].push(linkType);\n    });\n    return grouped;\n  },\n  // Create new link type\n  async create(linkType) {\n    const {\n      data,\n      error\n    } = await supabase.from('link_types').insert([linkType]).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  // Update link type\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('link_types').update(updates).eq('id', id).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  }\n};\n\n// Admin statistics and reports\nexport const adminReportsApi = {\n  // Get link coverage report\n  async getLinkCoverageReport() {\n    const {\n      data,\n      error\n    } = await supabase.rpc('get_link_coverage_report');\n    if (error) {\n      // Fallback to manual calculation if RPC doesn't exist\n      const {\n        data: allCombos\n      } = await supabase.from('gyms').select(`\n          id,\n          name,\n          link_types:link_types(id, name, label, emoji)\n        `);\n      const {\n        data: existingLinks\n      } = await supabase.from('gym_links').select('gym_id, link_type_id');\n\n      // Calculate coverage manually\n      return this.calculateCoverage(allCombos, existingLinks);\n    }\n    return data || [];\n  },\n  // Calculate coverage manually\n  calculateCoverage(gyms, existingLinks) {\n    // This is a fallback calculation\n    const coverage = [];\n    // Implementation would go here\n    return coverage;\n  },\n  // Get missing links report\n  async getMissingLinksReport() {\n    const allGyms = await supabase.from('gyms').select('*');\n    const allLinkTypes = await supabase.from('link_types').select('*').eq('is_active', true);\n    const existingLinks = await supabase.from('gym_links').select('*').eq('is_active', true);\n    const missing = [];\n    allGyms.data.forEach(gym => {\n      allLinkTypes.data.forEach(linkType => {\n        const exists = existingLinks.data.some(link => link.gym_id === gym.id && link.link_type_id === linkType.id);\n        if (!exists) {\n          missing.push({\n            gym_id: gym.id,\n            gym_name: gym.name,\n            link_type_id: linkType.id,\n            link_type_name: linkType.name,\n            link_type_label: linkType.label,\n            link_type_emoji: linkType.emoji,\n            category: linkType.category\n          });\n        }\n      });\n    });\n    return missing;\n  }\n};","map":{"version":3,"names":["supabase","gymLinksApi","getAllLinksDetailed","data","error","from","select","order","Error","message","getLinksByGym","gymId","eq","getQuickLinks","upsertGymLink","linkTypeId","url","upsert","gym_id","link_type_id","is_active","onConflict","single","deleteGymLink","delete","bulkImportLinks","links","linkTypesApi","getAll","getByCategory","grouped","forEach","linkType","category","push","create","insert","update","id","updates","adminReportsApi","getLinkCoverageReport","rpc","allCombos","existingLinks","calculateCoverage","gyms","coverage","getMissingLinksReport","allGyms","allLinkTypes","missing","gym","exists","some","link","gym_name","name","link_type_name","link_type_label","label","link_type_emoji","emoji"],"sources":["C:/Users/Jayme/ACTIVE PROJECTS/MASTER EVENTS/MasterEventsCalendar/src/lib/gymLinksApi.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\n// 🏭 Jayme's Link Factory API Functions\r\n// Manages gym links in Supabase database\r\n\r\nexport const gymLinksApi = {\r\n  // Get all gym links with details\r\n  async getAllLinksDetailed() {\r\n    const { data, error } = await supabase\r\n      .from('gym_links_detailed')\r\n      .select('*')\r\n      .order('gym_name')\r\n      .order('sort_order');\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data || [];\r\n  },\r\n\r\n  // Get links for a specific gym\r\n  async getLinksByGym(gymId) {\r\n    const { data, error } = await supabase\r\n      .from('gym_links_detailed')\r\n      .select('*')\r\n      .eq('gym_id', gymId)\r\n      .order('sort_order');\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data || [];\r\n  },\r\n\r\n  // Get quick links (top 5 most used)\r\n  async getQuickLinks() {\r\n    const { data, error } = await supabase\r\n      .from('quick_links')\r\n      .select('*');\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data || [];\r\n  },\r\n\r\n  // Create or update a gym link\r\n  async upsertGymLink(gymId, linkTypeId, url) {\r\n    const { data, error } = await supabase\r\n      .from('gym_links')\r\n      .upsert({\r\n        gym_id: gymId,\r\n        link_type_id: linkTypeId,\r\n        url: url,\r\n        is_active: true\r\n      }, {\r\n        onConflict: 'gym_id,link_type_id'\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data;\r\n  },\r\n\r\n  // Delete a gym link\r\n  async deleteGymLink(gymId, linkTypeId) {\r\n    const { error } = await supabase\r\n      .from('gym_links')\r\n      .delete()\r\n      .eq('gym_id', gymId)\r\n      .eq('link_type_id', linkTypeId);\r\n    \r\n    if (error) throw new Error(error.message);\r\n  },\r\n\r\n  // Bulk import links\r\n  async bulkImportLinks(links) {\r\n    const { data, error } = await supabase\r\n      .from('gym_links')\r\n      .upsert(links, {\r\n        onConflict: 'gym_id,link_type_id'\r\n      })\r\n      .select();\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const linkTypesApi = {\r\n  // Get all link types\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('link_types')\r\n      .select('*')\r\n      .eq('is_active', true)\r\n      .order('sort_order');\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data || [];\r\n  },\r\n\r\n  // Get link types by category\r\n  async getByCategory() {\r\n    const { data, error } = await supabase\r\n      .from('link_types')\r\n      .select('*')\r\n      .eq('is_active', true)\r\n      .order('category')\r\n      .order('sort_order');\r\n    \r\n    if (error) throw new Error(error.message);\r\n    \r\n    // Group by category\r\n    const grouped = {};\r\n    data.forEach(linkType => {\r\n      if (!grouped[linkType.category]) {\r\n        grouped[linkType.category] = [];\r\n      }\r\n      grouped[linkType.category].push(linkType);\r\n    });\r\n    \r\n    return grouped;\r\n  },\r\n\r\n  // Create new link type\r\n  async create(linkType) {\r\n    const { data, error } = await supabase\r\n      .from('link_types')\r\n      .insert([linkType])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data;\r\n  },\r\n\r\n  // Update link type\r\n  async update(id, updates) {\r\n    const { data, error } = await supabase\r\n      .from('link_types')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw new Error(error.message);\r\n    return data;\r\n  }\r\n};\r\n\r\n// Admin statistics and reports\r\nexport const adminReportsApi = {\r\n  // Get link coverage report\r\n  async getLinkCoverageReport() {\r\n    const { data, error } = await supabase.rpc('get_link_coverage_report');\r\n    \r\n    if (error) {\r\n      // Fallback to manual calculation if RPC doesn't exist\r\n      const { data: allCombos } = await supabase\r\n        .from('gyms')\r\n        .select(`\r\n          id,\r\n          name,\r\n          link_types:link_types(id, name, label, emoji)\r\n        `);\r\n      \r\n      const { data: existingLinks } = await supabase\r\n        .from('gym_links')\r\n        .select('gym_id, link_type_id');\r\n      \r\n      // Calculate coverage manually\r\n      return this.calculateCoverage(allCombos, existingLinks);\r\n    }\r\n    \r\n    return data || [];\r\n  },\r\n\r\n  // Calculate coverage manually\r\n  calculateCoverage(gyms, existingLinks) {\r\n    // This is a fallback calculation\r\n    const coverage = [];\r\n    // Implementation would go here\r\n    return coverage;\r\n  },\r\n\r\n  // Get missing links report\r\n  async getMissingLinksReport() {\r\n    const allGyms = await supabase.from('gyms').select('*');\r\n    const allLinkTypes = await supabase.from('link_types').select('*').eq('is_active', true);\r\n    const existingLinks = await supabase.from('gym_links').select('*').eq('is_active', true);\r\n    \r\n    const missing = [];\r\n    \r\n    allGyms.data.forEach(gym => {\r\n      allLinkTypes.data.forEach(linkType => {\r\n        const exists = existingLinks.data.some(\r\n          link => link.gym_id === gym.id && link.link_type_id === linkType.id\r\n        );\r\n        \r\n        if (!exists) {\r\n          missing.push({\r\n            gym_id: gym.id,\r\n            gym_name: gym.name,\r\n            link_type_id: linkType.id,\r\n            link_type_name: linkType.name,\r\n            link_type_label: linkType.label,\r\n            link_type_emoji: linkType.emoji,\r\n            category: linkType.category\r\n          });\r\n        }\r\n      });\r\n    });\r\n    \r\n    return missing;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}