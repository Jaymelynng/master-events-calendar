{"ast":null,"code":"import { supabase } from './supabase';\n\n// Gyms API\nexport const gymsApi = {\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('gyms').select('*').order('name');\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async create(gym) {\n    const {\n      data,\n      error\n    } = await supabase.from('gyms').insert([gym]).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('gyms').update(updates).eq('id', id).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('gyms').delete().eq('id', id);\n    if (error) throw new Error(error.message);\n  }\n};\n\n// Events API\nexport const eventsApi = {\n  // Bulk import for admin workflow\n  async bulkImport(events) {\n    if (!events || !Array.isArray(events) || events.length === 0) {\n      throw new Error('Invalid events data: must be non-empty array');\n    }\n\n    // Validate each event has required fields\n    for (let i = 0; i < events.length; i++) {\n      const event = events[i];\n      if (!event.gym_id || !event.date || !event.type || !event.event_url) {\n        throw new Error(`Event ${i + 1} missing required fields (gym_id, date, type, event_url)`);\n      }\n\n      // Validate date format\n      const dateTest = new Date(event.date);\n      if (isNaN(dateTest.getTime())) {\n        throw new Error(`Event ${i + 1} has invalid date format: ${event.date}`);\n      }\n    }\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('events').upsert(events, {\n        onConflict: 'gym_id,date,time,type'\n      }).select();\n      if (error) {\n        console.error('Supabase bulk import error:', error);\n        throw new Error(`Database error: ${error.message}`);\n      }\n      if (!data || data.length === 0) {\n        console.warn('Bulk import returned no data');\n      }\n      return data || [];\n    } catch (networkError) {\n      console.error('Network error during bulk import:', networkError);\n      throw new Error(`Failed to save events: ${networkError.message}`);\n    }\n  },\n  async getAll(startDate, endDate) {\n    let query = supabase.from('events_with_gym').select('*').order('date', {\n      ascending: true\n    });\n    if (startDate) {\n      query = query.gte('date', startDate);\n    }\n    if (endDate) {\n      query = query.lte('date', endDate);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async create(event) {\n    // First get the gym name for the event\n    const {\n      data: gym\n    } = await supabase.from('gyms').select('name').eq('id', event.gym_id).single();\n    const {\n      data,\n      error\n    } = await supabase.from('events').insert([event]).select().single();\n    if (error) throw new Error(error.message);\n\n    // Add gym_name for frontend compatibility\n    return {\n      ...data,\n      gym_name: (gym === null || gym === void 0 ? void 0 : gym.name) || 'Unknown'\n    };\n  },\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('events').update(updates).eq('id', id).select().single();\n    if (error) throw new Error(error.message);\n\n    // Get gym name if gym_id was updated\n    if (updates.gym_id) {\n      const {\n        data: gym\n      } = await supabase.from('gyms').select('name').eq('id', updates.gym_id).single();\n      data.gym_name = (gym === null || gym === void 0 ? void 0 : gym.name) || 'Unknown';\n    }\n    return data;\n  },\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('events').delete().eq('id', id);\n    if (error) throw new Error(error.message);\n  }\n};\n\n// Event Types API\nexport const eventTypesApi = {\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('event_types').select('*').order('name');\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async getTrackedTypes() {\n    const {\n      data,\n      error\n    } = await supabase.from('event_types').select('*').eq('is_tracked', true).order('name');\n    if (error) throw new Error(error.message);\n    return data;\n  },\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('event_types').update(updates).eq('id', id).select().single();\n    if (error) throw new Error(error.message);\n    return data;\n  }\n};\nexport const monthlyRequirementsApi = {\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('monthly_requirements').select('*').order('event_type');\n    if (error) throw new Error(error.message);\n    return data || [];\n  }\n};","map":{"version":3,"names":["supabase","gymsApi","getAll","data","error","from","select","order","Error","message","create","gym","insert","single","update","id","updates","eq","delete","eventsApi","bulkImport","events","Array","isArray","length","i","event","gym_id","date","type","event_url","dateTest","Date","isNaN","getTime","upsert","onConflict","console","warn","networkError","startDate","endDate","query","ascending","gte","lte","gym_name","name","eventTypesApi","getTrackedTypes","monthlyRequirementsApi"],"sources":["C:/Users/Jayme/JAYMES APP PROJECTS/MASTER EVENTS( origional file)/src/lib/api.js"],"sourcesContent":["import { supabase } from './supabase'\r\n\r\n// Gyms API\r\nexport const gymsApi = {\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('gyms')\r\n      .select('*')\r\n      .order('name')\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async create(gym) {\r\n    const { data, error } = await supabase\r\n      .from('gyms')\r\n      .insert([gym])\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async update(id, updates) {\r\n    const { data, error } = await supabase\r\n      .from('gyms')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async delete(id) {\r\n    const { error } = await supabase\r\n      .from('gyms')\r\n      .delete()\r\n      .eq('id', id)\r\n    \r\n    if (error) throw new Error(error.message)\r\n  }\r\n}\r\n\r\n// Events API\r\nexport const eventsApi = {\r\n  // Bulk import for admin workflow\r\n  async bulkImport(events) {\r\n    if (!events || !Array.isArray(events) || events.length === 0) {\r\n      throw new Error('Invalid events data: must be non-empty array');\r\n    }\r\n    \r\n    // Validate each event has required fields\r\n    for (let i = 0; i < events.length; i++) {\r\n      const event = events[i];\r\n      if (!event.gym_id || !event.date || !event.type || !event.event_url) {\r\n        throw new Error(`Event ${i + 1} missing required fields (gym_id, date, type, event_url)`);\r\n      }\r\n      \r\n      // Validate date format\r\n      const dateTest = new Date(event.date);\r\n      if (isNaN(dateTest.getTime())) {\r\n        throw new Error(`Event ${i + 1} has invalid date format: ${event.date}`);\r\n      }\r\n    }\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('events')\r\n        .upsert(events, {\r\n          onConflict: 'gym_id,date,time,type'\r\n        })\r\n        .select();\r\n      \r\n      if (error) {\r\n        console.error('Supabase bulk import error:', error);\r\n        throw new Error(`Database error: ${error.message}`);\r\n      }\r\n      \r\n      if (!data || data.length === 0) {\r\n        console.warn('Bulk import returned no data');\r\n      }\r\n      \r\n      return data || [];\r\n    } catch (networkError) {\r\n      console.error('Network error during bulk import:', networkError);\r\n      throw new Error(`Failed to save events: ${networkError.message}`);\r\n    }\r\n  },\r\n\r\n  async getAll(startDate, endDate) {\r\n    let query = supabase\r\n      .from('events_with_gym')\r\n      .select('*')\r\n      .order('date', { ascending: true })\r\n    \r\n    if (startDate) {\r\n      query = query.gte('date', startDate)\r\n    }\r\n    if (endDate) {\r\n      query = query.lte('date', endDate)\r\n    }\r\n    \r\n    const { data, error } = await query\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async create(event) {\r\n    // First get the gym name for the event\r\n    const { data: gym } = await supabase\r\n      .from('gyms')\r\n      .select('name')\r\n      .eq('id', event.gym_id)\r\n      .single()\r\n    \r\n    const { data, error } = await supabase\r\n      .from('events')\r\n      .insert([event])\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    \r\n    // Add gym_name for frontend compatibility\r\n    return {\r\n      ...data,\r\n      gym_name: gym?.name || 'Unknown'\r\n    }\r\n  },\r\n\r\n  async update(id, updates) {\r\n    const { data, error } = await supabase\r\n      .from('events')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    \r\n    // Get gym name if gym_id was updated\r\n    if (updates.gym_id) {\r\n      const { data: gym } = await supabase\r\n        .from('gyms')\r\n        .select('name')\r\n        .eq('id', updates.gym_id)\r\n        .single()\r\n      \r\n      data.gym_name = gym?.name || 'Unknown'\r\n    }\r\n    \r\n    return data\r\n  },\r\n\r\n  async delete(id) {\r\n    const { error } = await supabase\r\n      .from('events')\r\n      .delete()\r\n      .eq('id', id)\r\n    \r\n    if (error) throw new Error(error.message)\r\n  }\r\n}\r\n\r\n// Event Types API\r\nexport const eventTypesApi = {\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('event_types')\r\n      .select('*')\r\n      .order('name')\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async getTrackedTypes() {\r\n    const { data, error } = await supabase\r\n      .from('event_types')\r\n      .select('*')\r\n      .eq('is_tracked', true)\r\n      .order('name')\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  },\r\n\r\n  async update(id, updates) {\r\n    const { data, error } = await supabase\r\n      .from('event_types')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single()\r\n    \r\n    if (error) throw new Error(error.message)\r\n    return data\r\n  }\r\n} \r\n\r\nexport const monthlyRequirementsApi = {\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('monthly_requirements')\r\n      .select('*')\r\n      .order('event_type');\r\n    if (error) throw new Error(error.message);\r\n    return data || [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}